/*
 * This file is generated by jOOQ.
 */
package code.craft.documents.db.tables;


import code.craft.documents.db.Docup;
import code.craft.documents.db.Keys;
import code.craft.documents.db.tables.records.DocumentInfoRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentInfo extends TableImpl<DocumentInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>docup.document_info</code>
     */
    public static final DocumentInfo DOCUMENT_INFO = new DocumentInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentInfoRecord> getRecordType() {
        return DocumentInfoRecord.class;
    }

    /**
     * The column <code>docup.document_info.id</code>.
     */
    public final TableField<DocumentInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>docup.document_info.file_name</code>.
     */
    public final TableField<DocumentInfoRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>docup.document_info.file_type</code>.
     */
    public final TableField<DocumentInfoRecord, String> FILE_TYPE = createField(DSL.name("file_type"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>docup.document_info.file_path</code>.
     */
    public final TableField<DocumentInfoRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>docup.document_info.created_date</code>.
     */
    public final TableField<DocumentInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private DocumentInfo(Name alias, Table<DocumentInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentInfo(Name alias, Table<DocumentInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>docup.document_info</code> table reference
     */
    public DocumentInfo(String alias) {
        this(DSL.name(alias), DOCUMENT_INFO);
    }

    /**
     * Create an aliased <code>docup.document_info</code> table reference
     */
    public DocumentInfo(Name alias) {
        this(alias, DOCUMENT_INFO);
    }

    /**
     * Create a <code>docup.document_info</code> table reference
     */
    public DocumentInfo() {
        this(DSL.name("document_info"), null);
    }

    public <O extends Record> DocumentInfo(Table<O> child, ForeignKey<O, DocumentInfoRecord> key) {
        super(child, key, DOCUMENT_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Docup.DOCUP;
    }

    @Override
    public Identity<DocumentInfoRecord, Integer> getIdentity() {
        return (Identity<DocumentInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentInfoRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_INFO_PRIMARY;
    }

    @Override
    public DocumentInfo as(String alias) {
        return new DocumentInfo(DSL.name(alias), this);
    }

    @Override
    public DocumentInfo as(Name alias) {
        return new DocumentInfo(alias, this);
    }

    @Override
    public DocumentInfo as(Table<?> alias) {
        return new DocumentInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentInfo rename(String name) {
        return new DocumentInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentInfo rename(Name name) {
        return new DocumentInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentInfo rename(Table<?> name) {
        return new DocumentInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
